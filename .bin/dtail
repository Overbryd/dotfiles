#!/bin/bash
set -eu

usage() {
  echo "Usage: dtail [options] [--] path...

Options:
  -r|--recursive
    Watch subdirectories recursively.
  --exclude  <pattern> | --excludei <pattern>
    Exclude files if filename matches <pattern> (POSIX extended regular expression).
    It is case insensitive with --excludei.
  --fromfile <file>
    Read filenames to watch or exclude from a file, one filename per line.
    If filenames begin with @ they are excluded as described above.
  -p|--poolsize <num>
    Maximum number of watching processes. Default 1.
"
  exit 1
}

fail() {
  echo $*
  exit 2
}

targets=()
poolsize=1
options=(-q -m -e create,modify,delete)
while [[ $# != 0 ]]; do
  case "$1" in
    -r|--recursive)
      options+=($1)
      shift
      ;;
    --exclude|--excludei)
      [[ $# > 1 ]] || fail "Missing pattern for $1"
      options+=($1 $2)
      shift 2
      ;;
    --fromfile)
      [[ $# > 1 ]] || fail "Missing filename for $1"
      [[ -f $2 ]] || fail "No such file $2"
      [[ -r $2 ]] || fail "Permission denied reading $2"
      options+=($1 $2)
      shift 2
      ;;
    -p|--poolsize)
      [[ $# > 1 ]] || fail "Missing poolsize for $1"
      poolsize=$2
      shift 2
      ;;
    --)
      shift
      break
      ;;
    -*)
      fail "Invalid option $1"
      ;;
    *)
      targets+=($1)
      shift
      ;;
  esac
done

targets+=($*)
[[ ${#targets[@]} > 0 ]] || usage
for t in ${targets[@]}; do
  [[ -e $t ]] || fail "Invalid path $t"
  [[ -r $t ]] || fail "Permission denied reading $t"
done

filepool_push() {
  if [[ ${#filepool[@]} == $poolsize ]]; then
    kill ${filepool[0]%%:*}
    if [[ ${#filepool[@]} > 1 ]]; then
      unset filepool[0]
      filepool=(${filepool[@]})
    else
      filepool=()
    fi
  fi
  filepool+=($1:$2)
}

filepool_find() {
  local i
  for ((i = 0; i < ${#filepool[@]}; i++)); do
    if [[ ${filepool[$i]#*:} == $1 ]]; then
      echo ${filepool[$i]}
      break
    fi
  done
}

filepool_remove() {
  local i
  case ${#filepool[@]} in
  0)
    ;;
  1)
    if [[ ${filepool[0]#*:} == $1 ]]; then
      filepool=()
    fi
    ;;
  *)
    for ((i = 0; i < ${#filepool[@]}; i++)); do
      if [[ ${filepool[$i]#*:} == $1 ]]; then
        unset filepool[$i]
        filepool=(${filepool[@]})
      fi
    done
    ;;
  esac
}

filepool=()

for path in $(
  find ${targets[@]} -type f -readable -printf '%T@ %p\n' |
    sort -n | tail -n $poolsize | cut -f2- -d' '
); do
  tail -q -F --pid=$$ -n 0 $path &
  disown
  filepool_push $! $path
done

while read event path; do
  case $event in
  CREATE)
    [[ -f $path && -r $path ]] || continue
    tail -q -F --pid=$$ -n +1 $path &
    disown
    filepool_push $! $path
    ;;
  MODIFY)
    [[ -f $path && -r $path ]] || continue
    f=$(filepool_find $path)
    if [[ -n "$f" ]]; then
      filepool_remove $path
      filepool+=($f)
    else
      tail -q -F --pid=$$ -n 1 $path &
      disown
      filepool_push $! $path
    fi
    ;;
  DELETE)
    f=$(filepool_find $path)
    if [[ -n "$f" ]]; then
      filepool_remove $path
      kill ${f%%:*}
    fi
    ;;
  esac
done < <(inotifywait ${options[@]} --format '%e %w%f' -- ${targets[@]})
